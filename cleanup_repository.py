#!/usr/bin/env python3
"""
üßπ Nettoyage automatique du repository
Supprime les doublons et organise les fichiers
"""

import os
import shutil
import glob
from pathlib import Path

def cleanup_repository():
    """Nettoie et organise le repository"""
    
    print("üßπ NETTOYAGE DU REPOSITORY WWYVQ")
    
    # Fichiers √† SUPPRIMER (doublons/obsol√®tes)
    files_to_remove = [
        "main.py",                    # Remplac√© par wwyvq_master_final.py
        "main_updated.py",           # Doublon
        "main_enhanced.py",          # Doublon
        "launcher.py",               # Remplac√© par launch_now.py
        "ultimate_launcher.py",      # Doublon
        "kubernetes_advanced_old.py", # Version obsol√®te
        "wwyv4q_final.py",           # Version interm√©diaire
        "wwyvq4_ultimate.py",        # Version interm√©diaire
        "wwyvq4_ultimate_fix.py",    # Remplac√©
        "demo_improvements.py",      # Fichier de d√©monstration
        "enhanced_monitoring.py",    # Remplac√© par enhanced_credential_validator.py
        "enhanced_security_monitor.py", # Remplac√© par enhanced_credential_validator.py
        "enhanced_telegram_alerts.py", # Remplac√© par professional_telegram_notifier.py
        "f8s_example_usage.py",      # Fichier f8s obsol√®te
        "f8s_exploit_pod.py",        # Fichier f8s obsol√®te
        "final_demo.py",             # Fichier de d√©monstration
        "intensive_hunt_launcher.py", # Fichier intensif obsol√®te
        "optimized_f8s_mega_launch.py", # Fichier optimis√© obsol√®te
        "ultimate_6h_hunt.py",       # Fichier ultimate obsol√®te
        "mega_cidr_uhq.py",          # Fichier mega obsol√®te
        "speed_hunt.py",             # Fichier speed obsol√®te
        "examples_usage.py",         # Fichier d'exemple
        "dashboard.py",              # Remplac√© par interface web
        "aio_k8s_exploit.py",        # Fichier aio obsol√®te
        "aio_k8s_exploit_integration.py", # Fichier aio obsol√®te
        "security_monitor_integration.py", # Int√©gr√© dans le nouveau syst√®me
        "verify_implementation.py",   # Fichier de v√©rification
        "telegram_test.py"           # Fichier de test
    ]
    
    # Fichiers de test √† supprimer
    test_files = glob.glob("test_*.py")
    files_to_remove.extend(test_files)
    
    # Fichiers √† GARDER (essentiels)
    essential_files = [
        "wwyvq_master_final.py",     # SCRIPT PRINCIPAL
        "wwyvq_enhanced_framework.py", # NOUVEAU SCRIPT PRINCIPAL
        "kubernetes_advanced.py",    # Framework principal
        "k8s_exploit_master.py",     # Exploitation avanc√©e
        "mail_services_hunter.py",   # Mail hunter
        "telegram_perfect_hits.py",  # Notifications
        "enhanced_credential_validator.py", # Validation avanc√©e
        "professional_telegram_notifier.py", # Notifications pros
        "organized_results_manager.py",    # Gestion r√©sultats
        "app.py",                    # Interface web
        "launch_now.py",             # Launcher rapide
        "targets.txt",               # Cibles
        "targets_massive_optimized.txt", # Cibles optimis√©es
        "setup_ultimate.sh",         # Setup
        "requirements_ultimate.txt"  # D√©pendances
    ]
    
    # Cr√©er dossiers d'organisation
    folders = ["archive/", "modules/", "configs/", "results/", "docs/"]
    for folder in folders:
        os.makedirs(folder, exist_ok=True)
        print(f"üìÅ Dossier cr√©√©: {folder}")
    
    # Supprimer les doublons
    removed_count = 0
    for file in files_to_remove:
        if os.path.exists(file):
            try:
                shutil.move(file, f"archive/{file}")
                print(f"üóëÔ∏è Archiv√©: {file}")
                removed_count += 1
            except Exception as e:
                print(f"‚ùå Erreur lors de l'archivage de {file}: {e}")
    
    # D√©placer modules sp√©cialis√©s vers modules/
    specialized_modules = [
        "k8s_config_production.py",
        "kubernetes_privilege_escalation.py",
        "telegram_mail_enhanced.py",
        "wwyvq5_mail_orchestrator.py",
        "massive_cidr_generator.py",
        "k8s_production_harvester.py"
    ]
    
    moved_count = 0
    for module in specialized_modules:
        if os.path.exists(module):
            try:
                shutil.move(module, f"modules/{module}")
                print(f"üîß Module d√©plac√©: {module}")
                moved_count += 1
            except Exception as e:
                print(f"‚ùå Erreur lors du d√©placement de {module}: {e}")
    
    # D√©placer configurations vers configs/
    config_files = [
        "framework_config.yaml",
        "kubernetes_config.py"
    ]
    
    for config in config_files:
        if os.path.exists(config):
            try:
                shutil.move(config, f"configs/{config}")
                print(f"‚öôÔ∏è Config d√©plac√©e: {config}")
            except Exception as e:
                print(f"‚ùå Erreur lors du d√©placement de {config}: {e}")
    
    # Nettoyer les anciens dossiers de r√©sultats
    result_dirs_to_clean = []
    for item in os.listdir('.'):
        if (item.startswith('results_MASTER_') or 
            item.startswith('hunt_results_') or 
            item.startswith('exploitation_results_')):
            result_dirs_to_clean.append(item)
    
    cleaned_results = 0
    for result_dir in result_dirs_to_clean:
        if os.path.exists(result_dir):
            try:
                shutil.move(result_dir, f"archive/{result_dir}")
                print(f"üìÅ Ancien r√©sultat archiv√©: {result_dir}")
                cleaned_results += 1
            except Exception as e:
                print(f"‚ùå Erreur lors de l'archivage de {result_dir}: {e}")
    
    # Cr√©er README pour la nouvelle structure
    readme_content = f"""# üöÄ WWYVQ Enhanced Framework - Structure Organis√©e

## üìÅ STRUCTURE DU PROJET:

### üéØ FICHIERS PRINCIPAUX:
- `wwyvq_enhanced_framework.py` - **NOUVEAU SCRIPT PRINCIPAL AVEC AM√âLIORATIONS**
- `wwyvq_master_final.py` - Script principal original
- `launch_now.py` - Lancement rapide
- `app.py` - Interface web (port 5000)

### üîß MODULES CORE:
- `enhanced_credential_validator.py` - **VALIDATION AVANC√âE DES CREDENTIALS**
- `professional_telegram_notifier.py` - **NOTIFICATIONS PROFESSIONNELLES**
- `organized_results_manager.py` - **GESTION ORGANIS√âE DES R√âSULTATS**
- `kubernetes_advanced.py` - Framework principal
- `k8s_exploit_master.py` - Exploitation avanc√©e  
- `mail_services_hunter.py` - Chasse aux credentials mail
- `telegram_perfect_hits.py` - Notifications Telegram

### üìÇ DOSSIERS:
- `archive/` - Fichiers archiv√©s/obsol√®tes ({removed_count} fichiers)
- `modules/` - Modules sp√©cialis√©s ({moved_count} fichiers)
- `configs/` - Fichiers de configuration
- `results/` - **NOUVEAUX R√âSULTATS ORGANIS√âS**
  - Format: results/session_YYYYMMDD_HHMMSS/
  - Fichiers par service: aws.txt, sendgrid.txt, mailgun.txt, etc.
  - Exports JSON et CSV automatiques
  - Fichier host.txt g√©n√©r√© automatiquement
- `docs/` - Documentation

### üöÄ NOUVELLES FONCTIONNALIT√âS:

#### ‚úÖ Validation Avanc√©e des Credentials:
- Validation en temps r√©el via API
- D√©tection des faux positifs
- Scoring de confiance
- Support AWS, SendGrid, Mailgun, Mailjet, Postmark

#### ‚úÖ Notifications Telegram Professionnelles:
- Format professionnel avec d√©tails complets
- Statistiques en temps r√©el
- Alertes d'erreur contextuelles
- R√©sum√©s de session d√©taill√©s

#### ‚úÖ Gestion Organis√©e des R√©sultats:
- Structure par service (aws.txt, sendgrid.txt, etc.)
- Exports JSON et CSV automatiques
- Fichier host.txt g√©n√©r√©
- R√©sum√©s de session

### üéØ UTILISATION:

```bash
# Cr√©er un fichier de configuration
python3 wwyvq_enhanced_framework.py --create-config

# √âditer wwyvq_config.json avec vos param√®tres Telegram

# Lancer un scan
python3 wwyvq_enhanced_framework.py --targets targets.txt --config wwyvq_config.json --mode standard

# Modes disponibles: standard, intensive, stealth
```

### üìä AM√âLIORATIONS R√âALIS√âES:

1. ‚úÖ **Validation des credentials** - √âvite les faux positifs
2. ‚úÖ **Notifications professionnelles** - Format comme demand√©
3. ‚úÖ **R√©sultats organis√©s** - Structure aws.txt, sendgrid.txt, etc.
4. ‚úÖ **Nettoyage du repository** - Suppression des doublons
5. ‚úÖ **Architecture modulaire** - S√©paration des responsabilit√©s

### üîß CONFIGURATION:

Le fichier `wwyvq_config.json` permet de configurer:
- Param√®tres Telegram (token, chat_id)
- Param√®tres de scan (concurrence, timeout)
- Param√®tres de validation (seuils, services)
- Param√®tres de r√©sultats (formats d'export)

### üë®‚Äçüíª OP√âRATEUR: wKayaa
### üìÖ VERSION: 5.0 Enhanced
### üöÄ FRAMEWORK: WWYVQ Enhanced

#WWYVQ #EnhancedFramework #ProfessionalCredentialHunting #OrganizedResults #wKayaa
"""
    
    try:
        with open("README_ENHANCED.md", "w", encoding='utf-8') as f:
            f.write(readme_content)
        print("üìñ README cr√©√©: README_ENHANCED.md")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du README: {e}")
    
    print(f"""
üéâ NETTOYAGE TERMIN√â !
{'='*50}
‚úÖ Fichiers archiv√©s: {removed_count}
‚úÖ Modules d√©plac√©s: {moved_count}
‚úÖ Anciens r√©sultats archiv√©s: {cleaned_results}
‚úÖ Structure organis√©e cr√©√©e
‚úÖ README Enhanced cr√©√©

üöÄ PR√äT POUR LE NOUVEAU FRAMEWORK !
Utilisez: python3 wwyvq_enhanced_framework.py --help
""")

if __name__ == "__main__":
    cleanup_repository()
    
    # Cr√©er README pour la nouvelle structure
    readme_content = f"""# üöÄ WWYVQ Framework - Structure Organis√©e

## üìÅ STRUCTURE DU PROJET:

### üéØ FICHIERS PRINCIPAUX:
- `wwyvq_master_final.py` - **SCRIPT PRINCIPAL UNIFI√â**
- `launch_now.py` - Lancement rapide
- `app.py` - Interface web (port 5000)

### üîß MODULES CORE:
- `kubernetes_advanced.py` - Framework principal
- `k8s_exploit_master.py` - Exploitation avanc√©e  
- `mail_services_hunter.py` - Chasse aux credentials mail
- `telegram_perfect_hits.py` - Notifications Telegram

### üìÇ DOSSIERS:
- `modules/` - Modules sp√©cialis√©s
- `configs/` - Fichiers de configuration
- `results/` - R√©sultats des campagnes
- `archive/` - Anciens fichiers (doublons supprim√©s)

## üöÄ UTILISATION:

```bash
# Mode agressif avec Telegram
python wwyvq_master_final.py --mode aggressive --file targets.txt --telegram-token YOUR_TOKEN

# Mode mail avec interface web
python wwyvq_master_final.py --mode mail --target 192.168.1.0/24 --web

# Tous les modules en parall√®le
python wwyvq_master_final.py --mode all --file targets.txt --threads 1000 --web

# Mode furtif
python wwyvq_master_final.py --mode stealth --target example.com --threads 5

# Lancement rapide
python launch_now.py
"""